Assignment 3 client
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

int main(int argc, char **argv) {
    int sockfd;
    char sendline[100];
    char recvline[100];
    struct sockaddr_in servaddr;
    socklen_t servaddr_len = sizeof(servaddr);

    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("socket creation failed");
        return 1;
    }


    bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_port = htons(22000);
    inet_pton(AF_INET, "127.0.0.1", &servaddr.sin_addr);

    while (1) {
        bzero(sendline, 100);
        bzero(recvline, 100);

    
        fgets(sendline, 100, stdin);

        sendto(sockfd, sendline, strlen(sendline), 0,
               (struct sockaddr *)&servaddr, sizeof(servaddr));

        ssize_t n = recvfrom(sockfd, recvline, 100, 0,
                             (struct sockaddr *)&servaddr, &servaddr_len);
        if (n < 0) {
            perror("recvfrom failed");
            close(sockfd);
            return 1;
        }
        recvline[n] = '\0'; 
        printf("%s", recvline);
    }

    close(sockfd);
    return 0;
}




UDP Server : 
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

int main()
{
    char str[100];
    int listen_fd;
    struct sockaddr_in serveraddr, cliaddr;
    socklen_t len = sizeof(cliaddr);

    listen_fd = socket(AF_INET, SOCK_DGRAM, 0);

    bzero(&serveraddr, sizeof(serveraddr));

    serveraddr.sin_family = AF_INET;
    serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);
    serveraddr.sin_port = htons(22000);

    bind(listen_fd, (struct sockaddr *) &serveraddr, sizeof(serveraddr));
    while(1) {
        bzero(str, 100);
        int n = recvfrom(listen_fd, str, 100, 0, (struct sockaddr *)&cliaddr, &len);

        printf("Received: %s", str);

        sendto(listen_fd, str, n, 0, (struct sockaddr *)&cliaddr, len);
    }

    close(listen_fd);
    return 0;
}
