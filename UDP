Server
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

// Define constants
#define PORT 8080
#define BUFFER_SIZE 1024

int main() {
    int sockfd;
    struct sockaddr_in server_addr, client_addr;
    char buffer[BUFFER_SIZE];
    socklen_t addr_len = sizeof(client_addr);
    ssize_t recv_len;

    // Step 2: Create a UDP Socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Step 3: Create an address by using server's IP address and port
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;  // Bind to any IP address
    server_addr.sin_port = htons(PORT);  // Server port

    // Step 4: Bind the address and port using bind() system call
    if (bind(sockfd, (const struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind failed");
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    printf("Server is running on port %d...\n", PORT);

    while (1) {
        // Step 5: Receive a message from the Client using recvfrom() system call
        recv_len = recvfrom(sockfd, (char *)buffer, BUFFER_SIZE, 0, 
                            (struct sockaddr *)&client_addr, &addr_len);
        buffer[recv_len] = '\0';
        printf("Client: %s\n", buffer);

        // If the message is "exit", terminate the chat
        if (strcmp(buffer, "exit") == 0) {
            printf("Chat ended by client.\n");
            break;
        }

        // Step 6: Send the received message back (echo) to the client using sendto() system call
        sendto(sockfd, buffer, recv_len, 0, 
               (const struct sockaddr *)&client_addr, addr_len);
    }

    // Step 7: Close the socket using close() system call
    close(sockfd);
    return 0;
}

client

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

// Define constants
#define PORT 8080
#define BUFFER_SIZE 1024

int main() {
    int sockfd;
    struct sockaddr_in server_addr;
    char buffer[BUFFER_SIZE];
    socklen_t addr_len = sizeof(server_addr);

    // Step 2: Create a UDP Socket
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Step 3: Create an address by using server's IP address and port
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);

    // Convert server IP address to binary form and set it in server_addr
    if (inet_pton(AF_INET, "127.0.0.1", &server_addr.sin_addr) <= 0) {
        perror("Invalid address/ Address not supported");
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    while (1) {
        // Step 4: Send a message to the server using sendto() system call
        printf("You: ");
        fgets(buffer, BUFFER_SIZE, stdin);
        buffer[strcspn(buffer, "\n")] = 0; // Remove newline character

        sendto(sockfd, buffer, strlen(buffer), 0, 
               (const struct sockaddr *)&server_addr, addr_len);

        // If the message is "exit", terminate the chat
        if (strcmp(buffer, "exit") == 0) {
            printf("You ended the chat.\n");
            break;
        }

        // Step 4: Receive a message from the server using recvfrom() system call
        ssize_t recv_len = recvfrom(sockfd, (char *)buffer, BUFFER_SIZE, 0, 
                                    (struct sockaddr *)&server_addr, &addr_len);
        buffer[recv_len] = '\0';
        printf("Server: %s\n", buffer);
    }

    // Step 5: Close the socket using close() system call
    close(sockfd);
    return 0;
}
